import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

config.name = "CaPIPassTest"

loaded_site_cfg = getattr(config, 'loaded_site_config', False)
if not loaded_site_cfg:
  # Check for 'site_config' user parameter, and use that if available.
  site_cfg = lit_config.params.get('site_config', None)
  if site_cfg and os.path.exists(site_cfg):
    lit_config.load_config(config, site_cfg)
    raise SystemExit

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = ['.c','.cpp', '.llin']
config.excludes = ['scorep_init.c', 'testlib.c']


llvm_bin_dir = getattr(config, 'llvm_bin_dir', None)
capi_lib_dir = getattr(config, 'capi_lib_dir', None)
capi_cc = getattr(config, 'capi_cc', None)
capi_cxx = getattr(config, 'capi_cxx', None)
capi_mpicc = getattr(config, 'capi_mpicc', None)
capi_mpicxx = getattr(config, 'capi_mpicxx', None)
clang_cc = '{}/clang'.format(llvm_bin_dir)
clang_cxx = '{}/clang++'.format(llvm_bin_dir)
opt = '{}/opt'.format(llvm_bin_dir)
capi_inst_pass = '{}/passes/capi_inst/capi_inst.so'.format(capi_lib_dir)
capi_inst_pass_name = 'capi-inst'
talp_pass = '{}/passes/talp/talp_inst.so'.format(capi_lib_dir)
talp_pass_name = 'talp-inst'
to_llvm_args = '-O1 -Xclang -disable-llvm-passes -S -emit-llvm -o -'

dlb_lib_dir = getattr(config, 'dlb_lib_dir')
talp_args = '-L{} -Wl,-rpath,{} -l{}'.format(dlb_lib_dir, dlb_lib_dir, 'dlb_mpi')

config.substitutions.append(('%clang_cc', clang_cc))
config.substitutions.append(('%clang_cxx', clang_cxx))
config.substitutions.append(('%opt', opt))

config.substitutions.append(('%lib_dir', capi_lib_dir))
config.substitutions.append(('%capi_cc', capi_cc))
config.substitutions.append(('%capi_cxx', capi_cxx))
config.substitutions.append(('%capi_mpicc', capi_mpicc))
config.substitutions.append(('%capi_mpicxx', capi_mpicxx))

# TODO: Currently, the old load syntax seems to be required to get pass options to work (see https://stackoverflow.com/questions/67206238/how-to-define-and-read-cli-arguments-for-an-llvm-pass-with-the-new-pass-manager).
#       Remove this if possible.
#config.substitutions.append(('%capi-opt', '{} -load {} -load {} -load-pass-plugin {} -load-pass-plugin {} -passes=\'{}\''.format(opt, capi_inst_pass, talp_pass, capi_inst_pass, talp_pass, '{},{}'.format(capi_inst_pass_name, talp_pass_name))))
config.substitutions.append(('%capi-opt', '{} -load {} -load {} -load-pass-plugin {} -load-pass-plugin {} -O2'.format(opt, capi_inst_pass, talp_pass, capi_inst_pass, talp_pass)))
#config.substitutions.append(('%capi-opt', '{} -load {} -load {} -capi-inst -talp-inst'.format(opt, capi_inst_pass, talp_pass)))
config.substitutions.append(('%c-to-llvm', '{} {}'.format(clang_cc, to_llvm_args)))
config.substitutions.append(('%cpp-to-llvm', '{} {}'.format(clang_cxx, to_llvm_args)))

config.substitutions.append(('%talp_args', talp_args))


capi_scorep_support = getattr(config, 'capi_scorep_support', None)
capi_xray_lib = 'capixray_gnu'
capi_xray_scorep_lib = 'capixray_scorep'

config.substitutions.append(('%capi_xray_lib', capi_xray_lib))

if capi_scorep_support:
    config.substitutions.append(('%capi_xray_scorep_lib', capi_xray_scorep_lib))

else:
  config.excludes.append('scorep')
